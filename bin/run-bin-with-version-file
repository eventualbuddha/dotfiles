#!/bin/bash

set -euo pipefail

source ~/bin/_semver.sh

bin_install_root="${HOME}/.bin"

if [ $# -lt 5 ]; then
  echo "usage: ${0} PACKAGE VERSION_FILE VERSION_ENV BIN_NAME -- [ARG ...]" >&2
  exit 1
fi

bin_package=${1}; shift
version_file_name=${1}; shift
version_env_name=${1}; shift
bin_name=${1}; shift

if [ "${1}" != "--" ]; then
  echo "error: missing argument separator (--) after PACKAGE VERSION_FILE VERSION_ENV BIN_NAME" >&2
  exit 1
fi
shift

get_version_from_version_file() {
  local version_file_path="$(find-up "${version_file_name}" || true)"

  if [ -z "${version_file_path}" ]; then
    return
  fi

  local version=$(cat "${version_file_path}")

  if [[ "${version}" = */* ]]; then
    echo "error: invalid version: ${version}" >&2
    exit 1
  fi

  echo "${version}"
}

version=

if [ -n "${version_env_name}" ]; then
  version=$(printenv "${version_env_name}" || true)
fi

if [ -z "${version}" ]; then
  version=$(get_version_from_version_file)
fi

if [ -z "${version}" ]; then
  echo "error: no version found in ${version_file_name} files in ${PWD} or ancestors" >&2
  exit 1
fi

if is-semver-pattern "${version}"; then
  highest_version_match=

  for path in "${bin_install_root}/${bin_package}"/*; do
    candidate="$(basename "${path}")"

    if semver-match "${version}" "${candidate}"; then
      if [ -z "${highest_version_match}" ] || semver-gt "${candidate}" "${highest_version_match}"; then
        highest_version_match="${candidate}"
      fi
    fi
  done

  if [ -n "${highest_version_match}" ]; then
    version="${highest_version_match}"
  fi
fi

bin_install_path="${bin_install_root}/${bin_package}/${version}"

if [ -d "${bin_install_path}" ]; then
  export PATH="${bin_install_path}/bin:${PATH}"
  exec "${bin_install_path}/bin/$(basename "${bin_name}")" "$@"
else
  echo "error: version matching '${version}' could not be found" >&2
  exit 1
fi
